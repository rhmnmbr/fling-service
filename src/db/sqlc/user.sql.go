// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  hashed_password,
  phone,
  first_name,
  birth_date,
  gender,
  location_info,
  bio
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, email, hashed_password, phone, first_name, birth_date, gender, location_info, bio, fcm_token, created_at
`

type CreateUserParams struct {
	Email          string         `json:"email"`
	HashedPassword []byte         `json:"hashed_password"`
	Phone          string         `json:"phone"`
	FirstName      string         `json:"first_name"`
	BirthDate      time.Time      `json:"birth_date"`
	Gender         GenderEnum     `json:"gender"`
	LocationInfo   sql.NullString `json:"location_info"`
	Bio            sql.NullString `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.HashedPassword,
		arg.Phone,
		arg.FirstName,
		arg.BirthDate,
		arg.Gender,
		arg.LocationInfo,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Phone,
		&i.FirstName,
		&i.BirthDate,
		&i.Gender,
		&i.LocationInfo,
		&i.Bio,
		&i.FcmToken,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, hashed_password, phone, first_name, birth_date, gender, location_info, bio, fcm_token, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.Phone,
		&i.FirstName,
		&i.BirthDate,
		&i.Gender,
		&i.LocationInfo,
		&i.Bio,
		&i.FcmToken,
		&i.CreatedAt,
	)
	return i, err
}
