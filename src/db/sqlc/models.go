// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type GenderEnum string

const (
	GenderEnumMale   GenderEnum = "male"
	GenderEnumFemale GenderEnum = "female"
)

func (e *GenderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderEnum(s)
	case string:
		*e = GenderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderEnum: %T", src)
	}
	return nil
}

type NullGenderEnum struct {
	GenderEnum GenderEnum `json:"gender_enum"`
	Valid      bool       `json:"valid"` // Valid is true if GenderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GenderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderEnum), nil
}

type User struct {
	ID             uuid.UUID      `json:"id"`
	Email          string         `json:"email"`
	HashedPassword []byte         `json:"hashed_password"`
	Phone          string         `json:"phone"`
	FirstName      string         `json:"first_name"`
	BirthDate      time.Time      `json:"birth_date"`
	Gender         GenderEnum     `json:"gender"`
	LocationInfo   sql.NullString `json:"location_info"`
	Bio            sql.NullString `json:"bio"`
	FcmToken       sql.NullString `json:"fcm_token"`
	CreatedAt      time.Time      `json:"created_at"`
}
